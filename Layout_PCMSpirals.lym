<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>'''
MIT License

Copyright (c) 2017 Stephen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


Based on Lukas Chrowstowski's code
Author: Stephen
'''

import pya

pol = 'te'
###############PARAMETERS####################
#Shared Sweep
#sweep_length=[1, 2, 4, 6, 8, 10]
#sweep_corrugation = [80, 100, 120]
sweep_length=[1,2,10]
sweep_corrugation = [80,100]

#450
#sweep_period450=[392, 380, 370]
sweep_period450=[370,380]
#400
#sweep_period400=[413, 396, 382]
#############################################

##SECONDARY ADJUSTABLES########################
wg_bend_radius = 16 #16 for tm
wg_width=450
gcte_width=450
gctm_width=500
##################################


######Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# clean all cells within "cell"
ly.prune_subcells(cell.cell_index(), 10)
#delete_extra_top_cells(cell)
# Layer mapping:
LayerSi = pya.LayerInfo(1, 0)
LayerSiN = cell.layout().layer(LayerSi)
fpLayer = pya.LayerInfo(99, 0)
fpLayerN = cell.layout().layer(fpLayer)
TextLayer = pya.LayerInfo(10, 0)
TextLayerN = cell.layout().layer(TextLayer)
############################################
dbu = ly.dbu # fetch the database parameters

# Draw floor plan
#cell.shapes(fpLayerN).insert(pya.Box(0,0, 1000/dbu, 7000/dbu))

########Grating Coupler#################
#GC_imported = ly.create_cell("TE1550_220_25d_oxide_broadband_w", "SiEPIC-EBeam").cell_index()
GC_imported = ly.create_cell("te1550_220_25d_oxide_broadband_wg450", "LIB").cell_index()
print ("Cell: GC_imported: #%s" % GC_imported)
GC2_imported = ly.create_cell("tm_1550_220_10_oxide", "LIB").cell_index()
print ("Cell: GC2_imported: #%s" % GC2_imported)
########################################

x_offset = 0 #initialized as zero, each intereation increases it
y_offset = 0
countx=0 #incrementing count variable for drawing multiple devices
county=0
lasty_offset=0

# Create a sub-cell for our Ring resonator layout
top_cell = cell

for i in range(len(sweep_length)):
  for ii in range(len(sweep_period450)):
    #450
    for iii in range(len(sweep_corrugation)):
      ###Loads Current Iteration Parameters####
      cwidth=sweep_corrugation[iii]
      period = sweep_period450[ii]
      devicelength= sweep_length[i]
      ########################################

      ###Creates a Single Cell for this one device, better for moving############
      cell = cell.layout().create_cell("PCMSpiralTEM_WG%sP%sdw%sL%s_1" % (wg_width,period,cwidth,devicelength))
      #Create the cell with correct naming    
      t = pya.Trans(pya.Trans.R0, 0/dbu,0/dbu) 
      #calculate the translate needed
      top_cell.insert(pya.CellInstArray(cell.cell_index(), t))
      # place "cell" in the top cell
      #######################################   
      
      # place layout at location:
      x = countx * x_offset
      y = lasty_offset
      
      #########TE DEVICE#######################   
      t = pya.Trans(pya.Trans.R0, 0/dbu+x/dbu,0/dbu+y/dbu) 
      cell.insert(pya.CellInstArray(GC_imported, t, pya.Point(0,127/dbu), pya.Point(0,0), 2, 1))
      GC1_X = cell.bbox().width()
      GC1_Y = (cell.bbox().height()-127/dbu)/2     
      #########################################
      #cell.shapes(fpLayerN).insert(pya.Box(0,0, GC1_X, GC1_Y))
      
      ###Label for Input Port 2##########         
      t = pya.Trans(pya.Trans.R0,GC1_X+x/dbu,GC1_Y+127/dbu+y/dbu)#place on 2nd GC's port
      text = pya.Text ("opt_in_%s_1550_device_SpiralTEM_WG%sP%sdw%sL%s" % (pol,wg_width,period,cwidth,devicelength), t) #Formats the label we want to display
      shape = cell.shapes(TextLayerN).insert(text) #inserts into the Textlayer of our cell
      shape.text_size = 3/dbu #text font size
      ##########################
      
      #### SPIRAL PCELL ######
      pcell = ly.create_cell("[1] Spiral_BraggGrating", "Adiabatic_Spirals", {"silayer": LayerSi , "w": wg_width, "DeviceLength": devicelength, "Cwidth": cwidth, "pitch": period, "Chirp_Rate": 0, "n": 1800 , "textpolygon": 0, "textl": pya.LayerInfo(10, 0), "pinrec": pya.LayerInfo(69, 0), "textl": pya.LayerInfo(68, 0)} )
      print ("Cell: pcell: #%s" % pcell.cell_index())
      ## SPIRAL BOUNDARY BOX DIMENSIONS FOR ROUTING
      devicewidth = pcell.bbox().width()
      deviceheight = pcell.bbox().height()       
      ###
      
      #LENGTH BASED
      t1 = pya.Trans(pya.Trans.R0, (GC1_X)+devicewidth/2+10/dbu+wg_bend_radius*2/dbu+x/dbu, (GC1_Y)+deviceheight/2+wg_bend_radius/dbu+y/dbu)
      instance = cell.insert(pya.CellInstArray(pcell.cell_index(), t1))
      
      deviceleft = 10/dbu+wg_bend_radius*2/dbu
      deviceright = devicewidth+10/dbu+wg_bend_radius*2/dbu#x +1.5*devicewidth-wg_width/2*dbu
      
      
      start_point = [ GC1_X*dbu+x,GC1_Y*dbu+y]
      points_gc1 = [[10,0],[deviceleft*dbu+wg_width*dbu/2,0],[deviceleft*dbu+wg_width*dbu/2,wg_bend_radius+0.1]]
      points_gc4 = [[10,127],[10+wg_bend_radius,127],[10+wg_bend_radius,127+wg_bend_radius],[10+wg_bend_radius,127+wg_bend_radius+deviceheight*dbu*0.5],[10+wg_bend_radius,127+wg_bend_radius+deviceheight*dbu*0.5+wg_bend_radius],[10+wg_bend_radius+wg_bend_radius,127+wg_bend_radius+deviceheight*dbu*0.5+wg_bend_radius],[deviceright*dbu-wg_bend_radius,127+wg_bend_radius+deviceheight*dbu*0.5+wg_bend_radius],[deviceright*dbu-wg_width/2*dbu,127+wg_bend_radius+deviceheight*dbu*0.5+wg_bend_radius],[deviceright*dbu-wg_width/2*dbu,deviceheight*dbu+wg_bend_radius-0.1]]

      layout_waveguide_rel(cell, LayerSi, start_point, points_gc1, wg_width*dbu, wg_bend_radius)
      layout_waveguide_rel(cell, LayerSi, start_point, points_gc4, wg_width*dbu, wg_bend_radius)
      
      #Tapers
      dpts=[pya.DPoint(GC1_X*dbu+x,GC1_Y*dbu+(gcte_width*dbu/2.0)+y),pya.DPoint(GC1_X*dbu+x,GC1_Y*dbu-(gcte_width*dbu/2.0)+y),pya.DPoint(GC1_X*dbu+10+x,GC1_Y*dbu-(wg_width*dbu/2.0)+y),pya.DPoint(GC1_X*dbu+10+x,GC1_Y*dbu+(wg_width*dbu/2.0)+y)]
      dpolygon = DPolygon(dpts)
      element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
      cell.shapes(LayerSiN).insert(element)
      
      dpts=[pya.DPoint(GC1_X*dbu+x,GC1_Y*dbu+(gcte_width*dbu/2.0)+127+y),pya.DPoint(GC1_X*dbu+x,GC1_Y*dbu-(gcte_width*dbu/2.0)+127+y),pya.DPoint(GC1_X*dbu+10+x,GC1_Y*dbu-(wg_width*dbu/2.0)+127+y),pya.DPoint(GC1_X*dbu+10+x,GC1_Y*dbu+(wg_width*dbu/2.0)+127+y)]
      dpolygon = DPolygon(dpts)
      element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
      cell.shapes(LayerSiN).insert(element)
      
      
      ##TM DEVICE##         
      ###Creates a Single Cell for this one device, better for moving############
      cell2 = cell.layout().create_cell("PCMSpiralTEM_WG%sP%sdw%sL%s_2" % (wg_width,period,cwidth,devicelength))
      #Create the cell with correct naming    
      t = pya.Trans(pya.Trans.R0, 0,0) 
      #calculate the translate needed
      top_cell.insert(pya.CellInstArray(cell2.cell_index(), t))
      # place "cell" in the top cell
      #######################################  
      

      ######TM GC################
      d2offset = cell.bbox().width()+10/dbu #device 2 offset
      t = pya.Trans(pya.Trans.R0,d2offset+x/dbu,y/dbu) 
      cell2.insert(pya.CellInstArray(GC2_imported, t, pya.Point(0,127/dbu), pya.Point(0,0), 2, 1))
      GC2_X = cell2.bbox().width()
      GC2_Y = (cell2.bbox().height()-127/dbu)/2   
      #########################################
      
      ###Label for Input Port 2##########         
      t = pya.Trans(pya.Trans.R0,GC2_X+x/dbu+d2offset,GC2_Y+127/dbu+y/dbu)#place on 2nd GC's port
      text = pya.Text ("opt_in_tm_1550_device_SpiralTEM_WG%sP%sdw%sL%s" % (wg_width,period,cwidth,devicelength), t) #Formats the label we want to display
      shape = cell2.shapes(TextLayerN).insert(text) #inserts into the Textlayer of our cell
      shape.text_size = 3/dbu #text font size
      ##########################
        
      #LENGTH BASED
      t1 = pya.Trans(pya.Trans.R0, (GC2_X)+devicewidth/2+10/dbu+wg_bend_radius*2/dbu+d2offset+x/dbu, (GC2_Y)+deviceheight/2+wg_bend_radius/dbu+y/dbu)
      instance = cell2.insert(pya.CellInstArray(pcell.cell_index(), t1))
      
      start_point = [ d2offset*dbu+GC2_X*dbu+x, GC2_Y*dbu+y ]
      
      points_gc1 = [[10,0],[deviceleft*dbu+wg_width*dbu/2,0],[deviceleft*dbu+wg_width*dbu/2,wg_bend_radius+0.1]]
      points_gc4 = [[10,127],[10+wg_bend_radius,127],[10+wg_bend_radius,127+wg_bend_radius],[10+wg_bend_radius,127+wg_bend_radius+deviceheight*dbu*0.5],[10+wg_bend_radius,127+wg_bend_radius+deviceheight*dbu*0.5+wg_bend_radius],[10+wg_bend_radius+wg_bend_radius,127+wg_bend_radius+deviceheight*dbu*0.5+wg_bend_radius],[deviceright*dbu-wg_bend_radius,127+wg_bend_radius+deviceheight*dbu*0.5+wg_bend_radius],[deviceright*dbu-wg_width/2*dbu,127+wg_bend_radius+deviceheight*dbu*0.5+wg_bend_radius],[deviceright*dbu-wg_width/2*dbu,deviceheight*dbu+wg_bend_radius-0.1]]  
      
      layout_waveguide_rel(cell2, LayerSi, start_point, points_gc1, wg_width*dbu, wg_bend_radius)
      layout_waveguide_rel(cell2, LayerSi, start_point, points_gc4, wg_width*dbu, wg_bend_radius)
      
      #TAPERS
      dpts=[pya.DPoint(GC2_X*dbu+d2offset*dbu+x,GC2_Y*dbu+(gctm_width*dbu/2.0)+y),pya.DPoint(GC2_X*dbu+d2offset*dbu+x,GC2_Y*dbu-(gctm_width*dbu/2.0)+y),pya.DPoint(GC2_X*dbu+10+d2offset*dbu+x,GC2_Y*dbu-(wg_width*dbu/2.0)+y),pya.DPoint(GC2_X*dbu+10+d2offset*dbu+x,GC2_Y*dbu+(wg_width*dbu/2.0)+y)]
      dpolygon = DPolygon(dpts)
      element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
      cell2.shapes(LayerSiN).insert(element)
      
      dpts=[pya.DPoint(GC2_X*dbu+d2offset*dbu+x,GC2_Y*dbu+(gctm_width*dbu/2.0)+127+y),pya.DPoint(GC2_X*dbu+d2offset*dbu+x,GC2_Y*dbu-(gctm_width*dbu/2.0)+127+y),pya.DPoint(GC2_X*dbu+d2offset*dbu+10+x,GC2_Y*dbu-(wg_width*dbu/2.0)+127+y),pya.DPoint(GC2_X*dbu+10+d2offset*dbu+x,GC2_Y*dbu+(wg_width*dbu/2.0)+127+y)]
      dpolygon = DPolygon(dpts)
      element = Polygon.from_dpoly(dpolygon*(1.0/dbu))
      cell2.shapes(LayerSiN).insert(element)

      #Update Xoffset to calculate spacing between devices
      x_offset = cell.bbox().width()*dbu+cell2.bbox().width()*dbu+20
      y_offset = cell.bbox().height()*dbu+10
         
      countx = countx+1 #increments the count
      
    #Reset the x axis when the y axis increments
    x_offset=0
    countx = 0 
    #county = county+1
    
    lasty_offset+=y_offset
      
        
print ("LAYOUT COMPLETE")</text>
</klayout-macro>
